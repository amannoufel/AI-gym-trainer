# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from gym2 import gym
from pathlib import Path
import tkinter as tk
import pymongo
import cred
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, font, ttk
import google.generativeai as genai
from datetime import datetime
from tkinter import scrolledtext
from PIL import Image, ImageTk  # Import PIL for image handling

genai.configure(api_key='YOUR API KEY')
model = genai.GenerativeModel('gemini-1.5-pro') #replace with required model

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("images")

userdetails = {}
connection_string = "mongodb+srv://johnj:johnj@cluster0.eyljh7n.mongodb.net/?retryWrites=true&w=majority"
client = pymongo.MongoClient(connection_string)

# Access a specific database
db = client["aitrainer"]
split_strings = []
split_history = []
# Access or create a collection
collection = db["users"]
collection2 = db["history"]
start = 0
end = 13

def relative_to_assets(path: str) -> Path:
    # Add .jpeg extension to all file requests
    return ASSETS_PATH / Path(path + ".jpeg")

def load_image(path):
    img_path = relative_to_assets(path)
    pil_img = Image.open(img_path)
    return ImageTk.PhotoImage(pil_img)

def workout(c):
    global userdetails
    history = {}
    reps = gym(c)
    if reps != 0:
        current_date = datetime.now()

        # Format date as string
        date_string = current_date.strftime("%d-%m-%Y")
        
        print(c)
        history["username"] = userdetails["username"]
        if c == 0:
            history["workout"] = "curls"
        elif c == 1:
            history["workout"] = "squat"
        elif c == 2:
            history["workout"] = "pushups"
        elif c == 3:
            history["workout"] = "press"
        elif c == 4:
            history["workout"] = "bench"
        history["reps"] = reps
        history["date"] = date_string
        print(history)
        collection2.insert_one(history)

def split_string(input_string):
    # Split by newlines first
    parts = input_string.split('\n')
    result = []
    
    for part in parts:
        # If the part is longer than 30 characters, split it further
        while len(part) > 105:
            result.append(part[:105])
            part = part[105:]
        # Append the remaining part (which is <= 30 characters)
        result.append(part)
    
    return result

def signup_page():
    hidesignin()
    canvas.itemconfig(signupimage_bg, state="normal")
    signup_entry_1.place(
        x=269.0,
        y=151.0,
        width=198.0,
        height=31.0
    )
    signup_entry_2.place(
        x=269.0,
        y=371.0,
        width=198.0,
        height=31.0
    )
    signup_entry_3.place(
        x=497.0,
        y=371.0,
        width=198.0,
        height=31.0
    )
    signup_entry_4.place(
        x=497.0,
        y=151.0,
        width=198.0,
        height=31.0
    )
    signup_entry_5.place(
        x=497.0,
        y=219.0,
        width=198.0,
        height=31.0
    )
    signup_entry_6.place(
        x=269.0,
        y=219.0,
        width=198.0,
        height=30.0
    )

    signup_entry_7.place(
        x=269.0,
        y=296.0,
        width=198.0,
        height=30.0
    )
    signup_entry_8.place(
        x=497.0,
        y=295.0,
        width=198.0,
        height=30.0
    )
    orlogin.place(
        x=432.0,
        y=482.0,
        width=106.0,
        height=26.0
    )
    Signup.place(
        x=358.0,
        y=437.0,
        width=243.0040740966797,
        height=39.0
    )

def signup_hide():
    canvas.itemconfig(signupimage_bg, state="hidden")
    signup_entry_1.place_forget()
    signup_entry_2.place_forget()
    signup_entry_3.place_forget()
    signup_entry_4.place_forget()
    signup_entry_5.place_forget()
    signup_entry_6.place_forget()
    signup_entry_7.place_forget()
    signup_entry_8.place_forget()
    Signup.place_forget()
    orlogin.place_forget()

def hidebaselayout():
    canvas.itemconfig(bg_img, state="hidden")
    button_1.place_forget()
    button_2.place_forget()
    button_3.place_forget()
    button_4.place_forget()
    button_5.place_forget()
    
def hidesignin():
    canvas.itemconfig(sininpageImage, state="hidden")
    signinButton.place_forget()
    signipButton.place_forget()
    usernameentry.place_forget()
    passwordentry.place_forget()

def signin_page(c):
    if c == 1:
        signup_hide()
    canvas.itemconfig(login_msg, state="hidden")
    canvas.itemconfig(sininpageImage, state="normal")
    signinButton.place(
        x=350.0,
        y=398.0,
        width=243.0040740966797,
        height=39.0
    )
    signipButton.place(
        x=433.0,
        y=461.0,
        width=94.0,
        height=26.0
    )
    usernameentry.place(
        x=386.0,
        y=219.0,
        width=207.0,
        height=24.0
    )
    passwordentry.place(
        x=386.0,
        y=329.0,
        width=207.0,
        height=24.0
    )

def logout():
    hidebaselayout()
    switch_tab("")
    signin_page(0)
    
def signup():
    details = {
        "firstname": signup_entry_1.get(),
        "lastname": signup_entry_4.get(),
        "age": signup_entry_6.get(),
        "gender": signup_entry_5.get(),
        "height": signup_entry_7.get(),
        "weight": signup_entry_8.get(),
        "username": signup_entry_2.get(),
        "password": signup_entry_3.get()
    }
    result = collection.find_one({"username": details["username"]})
    if result:
        print("username taken")
        return
    print(details)
    collection.insert_one(details)

def login():
    # mongodb
    global userdetails
    canvas.itemconfig(login_msg, state="hidden")
    username = usernameentry.get()
    userdetails = collection.find_one({"username": username})
    if userdetails:
        print(userdetails)
        if userdetails["password"] != passwordentry.get():
            canvas.itemconfig(login_msg, text="incorrect password")
            canvas.itemconfig(login_msg, state="normal")
            return
    else:
        print("invalid user")
        canvas.itemconfig(login_msg, text="invalid username")
        canvas.itemconfig(login_msg, state="normal")
        return
    hidesignin()
    base_layout()
    switch_tab("home")

window = Tk()

window.geometry("944x573")
window.configure(bg="#000000")

canvas = Canvas(
    window,
    bg="#000000",
    height=575,
    width=944,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

# Load all images with PIL
bg = load_image("base.png")
bg_img = canvas.create_image(0, 5, image=bg, anchor="nw")
canvas.itemconfig(bg_img, state="hidden")

button_image_1 = load_image("button_1.png")
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: switch_tab("home"),
    relief="flat"
)

button_image_2 = load_image("button_2.png")
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: switch_tab("workout"),
    relief="flat"
)

button_image_3 = load_image("button_3.png")
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: switch_tab("question"),
    relief="flat"
)

button_image_4 = load_image("button_4.png")
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: switch_tab("history"),
    relief="flat"
)

button_image_5 = load_image("button_5.png")
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: logout(),
    relief="flat"
)

# Select effect
button_1select = load_image("button_1select.png")
button_2select = load_image("button_2select.png")
button_3select = load_image("button_3select.png")
button_4select = load_image("button_4select.png")

# Hover effect
# Code for button_1
button_1hover = load_image("button_1hover.png")

def button_1_hover(e):
    button_1.config(image=button_1hover)

def button_1_leave(e):
    button_1.config(image=button_image_1)

button_1.bind('<Enter>', button_1_hover)
button_1.bind('<Leave>', button_1_leave)

# Code for button_2
button_2hover = load_image("button_2hover.png")

def button_2_hover(e):
    button_2.config(image=button_2hover)

def button_2_leave(e):
    button_2.config(image=button_image_2)

button_2.bind('<Enter>', button_2_hover)
button_2.bind('<Leave>', button_2_leave)

# Code for button_3
button_3hover = load_image("button_3hover.png")

def button_3_hover(e):
    button_3.config(image=button_3hover)

def button_3_leave(e):
    button_3.config(image=button_image_3)

button_3.bind('<Enter>', button_3_hover)
button_3.bind('<Leave>', button_3_leave)

# Code for button_4
button_4hover = load_image("button_4hover.png")

def button_4_hover(e):
    button_4.config(image=button_4hover)

def button_4_leave(e):
    button_4.config(image=button_image_4)

button_4.bind('<Enter>', button_4_hover)
button_4.bind('<Leave>', button_4_leave)

# Code for button_5
button_5hover = load_image("button_5hover.png")

def button_5_hover(e):
    button_5.config(image=button_5hover)

def button_5_leave(e):
    button_5.config(image=button_image_5)

button_5.bind('<Enter>', button_5_hover)
button_5.bind('<Leave>', button_5_leave)

bg_rect = load_image("bg_rect.png")
bg_rect_img = canvas.create_image(255.0, 129.0, image=bg_rect, anchor="nw")
canvas.itemconfig(bg_rect_img, state="hidden")

pushup_image = load_image("pushups.png")
pushup_button = Button(
    image=pushup_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: workout(2),
    relief="flat"
)

pushuphover = load_image("pushup_buttonHover.png")

def pushup_button_hover(e):
    pushup_button.config(image=pushuphover)

def pushup_button_leave(e):
    pushup_button.config(image=pushup_image)

pushup_button.bind('<Enter>', pushup_button_hover)
pushup_button.bind('<Leave>', pushup_button_leave)

press_image = load_image("press.png")
press_button = Button(
    image=press_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: workout(3),
    relief="flat"
)

presshover = load_image("press_buttonHover.png")

def press_button_hover(e):
    press_button.config(image=presshover)

def press_button_leave(e):
    press_button.config(image=press_image)

press_button.bind('<Enter>', press_button_hover)
press_button.bind('<Leave>', press_button_leave)

squat_image = load_image("squat.png")
squat_button = Button(
    image=squat_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: workout(1),
    relief="flat"
)

squathover = load_image("squat_buttonHover.png")

def squat_button_hover(e):
    squat_button.config(image=squathover)

def squat_button_leave(e):
    squat_button.config(image=squat_image)

squat_button.bind('<Enter>', squat_button_hover)
squat_button.bind('<Leave>', squat_button_leave)

curl_image = load_image("curls.png")
curl_button = Button(
    image=curl_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: workout(0),
    relief="flat"
)

curlhover = load_image("curl_button_hover.png")

def curl_button_hover(e):
    curl_button.config(image=curlhover)

def curl_button_leave(e):
    curl_button.config(image=curl_image)

curl_button.bind('<Enter>', curl_button_hover)
curl_button.bind('<Leave>', curl_button_leave)

bench_image = load_image("bench.png")
bench_button = Button(
    image=bench_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: workout(4),
    relief="flat"
)

benchhover = load_image("bench_buttonHover.png")

def bench_button_hover(e):
    bench_button.config(image=benchhover)

def bench_button_leave(e):
    bench_button.config(image=bench_image)

bench_button.bind('<Enter>', bench_button_hover)
bench_button.bind('<Leave>', bench_button_leave)

choose_workout = load_image("choose_workout.png")
choose_workout_image = canvas.create_image(265.0, 130.0, image=choose_workout, anchor="nw")
canvas.itemconfig(choose_workout_image, state="hidden")

# Signin
sininpageimage = load_image("signinbase.png")
sininpageImage = canvas.create_image(250.0, 287.0, image=sininpageimage)

signipButtonImage = load_image("signinButton.png")
signinButton = Button(
    image=signipButtonImage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: login(),
    relief="flat"
)
signinButton.place(
    x=350.0,
    y=398.0,
    width=243.0040740966797,
    height=39.0
)

signipButtonImageHover = load_image("signinButtonHover.png")

def signinButton_hover(e):
    signinButton.config(image=signipButtonImageHover)

def signinButton_leave(e):
    signinButton.config(image=signipButtonImage)

signinButton.bind('<Enter>', signinButton_hover)
signinButton.bind('<Leave>', signinButton_leave)

signupButtonImage = load_image("signupButton.png")
signipButton = Button(
    image=signupButtonImage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: signup_page(),
    relief="flat"
)
signipButton.place(
    x=433.0,
    y=461.0,
    width=94.0,
    height=26.0
)

signupButtonImageHover = load_image("signupbuttonHover.png")

def signipButton_hover(e):
    signipButton.config(image=signupButtonImageHover)

def signipButton_leave(e):
    signipButton.config(image=signupButtonImage)

signipButton.bind('<Enter>', signipButton_hover)
signipButton.bind('<Leave>', signipButton_leave)

usernameentry = Entry(
    bd=0,
    bg="#B3C5F3",
    fg="#000716",
    highlightthickness=0
)
usernameentry.place(
    x=386.0,
    y=219.0,
    width=207.0,
    height=24.0
)

passwordentry = Entry(
    bd=0,
    bg="#B3C5F3",
    fg="#000716",
    highlightthickness=0,
    show="*"
)
passwordentry.place(
    x=386.0,
    y=329.0,
    width=207.0,
    height=24.0
)

# SignUp
signupimagebg = load_image("signupimagebg.png")
signupimage_bg = canvas.create_image(576.0, 287.0, image=signupimagebg)
canvas.itemconfig(signupimage_bg, state="hidden")

Signupimage = load_image("Signup.png")
Signup = Button(
    image=Signupimage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: signup(),
    relief="flat"
)

Signupimagehover = load_image("Signuphover.png")

def Signup_hover(e):
    Signup.config(image=Signupimagehover)

def Signup_leave(e):
    Signup.config(image=Signupimage)

Signup.bind('<Enter>', Signup_hover)
Signup.bind('<Leave>', Signup_leave)

Orloginimage = load_image("orlogin.png")
orlogin = Button(
    image=Orloginimage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: signin_page(1),
    relief="flat"
)

Orloginimagehover = load_image("orloginhover.png")

def orlogin_hover(e):
    orlogin.config(image=Orloginimagehover)

def orlogin_leave(e):
    orlogin.config(image=Orloginimage)

orlogin.bind('<Enter>', orlogin_hover)
orlogin.bind('<Leave>', orlogin_leave)

signup_entry_1 = Entry(
    bd=0,
    bg="#ACABCA",
    fg="#3E3E40",
    highlightthickness=0,
    font=font.Font(family="Helvetica", size=14, weight="normal")
)

signup_entry_2 = Entry(
    bd=0,
    bg="#ACABCA",
    fg="#3E3E40",
    highlightthickness=0,
    font=font.Font(family="Helvetica", size=14, weight="normal")
)

signup_entry_3 = Entry(
    bd=0,
    bg="#ACABCA",
    fg="#000716",
    highlightthickness=0
)

signup_entry_4 = Entry(
    bd=0,
    bg="#ACABCA",
    fg="#000716",
    highlightthickness=0
)

signup_entry_5 = Entry(
    bd=0,
    bg="#ACABCA",
    fg="#000716",
    highlightthickness=0
)

signup_entry_6 = Entry(
    bd=0,
    bg="#ACABC9",
    fg="#000716",
    highlightthickness=0
)

signup_entry_7 = Entry(
    bd=0,
    bg="#ACABC9",
    fg="#000716",
    highlightthickness=0
)

signup_entry_8 = Entry(
    bd=0,
    bg="#ACABC9",
    fg="#000716",
    highlightthickness=0
)

# Home page
home1 = load_image("home1.png")
home_image_1 = canvas.create_image(515.0, 186.5, image=home1)

home2 = load_image("home2.png")
home_image_2 = canvas.create_image(410.5, 394.5, image=home2)

canvas.itemconfig(home_image_1, state="hidden")
canvas.itemconfig(home_image_2, state="hidden")

# HISTORY
image_image_1 = load_image("image_1.png")
image_1 = canvas.create_image(472.0, 287.0, image=image_image_1)
canvas.itemconfig(image_1, state="hidden")

image_image_2 = load_image("image_2.png")
image_2 = canvas.create_image(461.0, 337.0, image=image_image_2)
canvas.itemconfig(image_2, state="hidden")

user = canvas.create_text(
    226.0,
    169.0,
    anchor="nw",
    text="User: johnj",
    fill="#000000",
    font=("Inter", 16 * -1)
)
canvas.itemconfig(user, state="hidden")

image_image_3 = load_image("image_3.png")
image_3 = canvas.create_image(446.0, 235.0, image=image_image_3)
canvas.itemconfig(image_3, state="hidden")

history = canvas.create_text(
    227.0,
    275.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 16 * -1)
)
canvas.itemconfig(history, state="hidden")

def scroll_history(event):
    delta = event.delta // 120
    print("delta", delta)
    global end, start
    if (end - delta) <= len(split_history) and (start - delta) >= 0:
        end = end - delta
        start = start - delta
        print("start", start)
        print("end", end)
        canvas.itemconfig(history, text='\n'.join(split_history[start:end + 1]))

# Question
image_baseRect = load_image("baseRect.png")
baseRect = canvas.create_image(547.0, 333.0, image=image_baseRect)
canvas.itemconfig(baseRect, state="hidden")

def clear_placeholder(event):
    """Clears the placeholder text when the entry gains focus."""
    if entry_1.get("1.0", "end-1c") == 'Type your question here':
        entry_1.delete("1.0", tk.END)
        entry_1.config(fg='#000716')

def set_placeholder(event):
    """Sets the placeholder text if the entry is empty when it loses focus."""
    if entry_1.get("1.0", "end-1c") == '':
        entry_1.insert("1.0", 'Type your question here')
        entry_1.config(fg='#D3D3D3')

entry_image_1 = load_image("entry_1.png")
entry_bg_1 = canvas.create_image(546.5, 226.0, image=entry_image_1)
canvas.itemconfig(entry_bg_1, state="hidden")

entry_1 = tk.Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.insert("1.0", 'Type your question here')

entry_1.bind("<FocusIn>", clear_placeholder)
entry_1.bind("<FocusOut>", set_placeholder)

geta_image = load_image("get_answer_button.png")
get_answer_button = Button(
    image=geta_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: get_answer(entry_1.get("1.0", "end-1c")),
    relief="flat"
)

# FUNCTIONS
response_area = None  # This will track our text window
def get_answer(q):
    global response_area
    # Retrieve user details from the database or session
    user_info = {
        "name": userdetails['firstname'],  # Assuming 'firstname' is the user's name
        "age": userdetails['age'],
        "height": userdetails['height'],  # Height in cm
        "weight": userdetails['weight']     # Weight in kg
    }
    
    # Create a custom prompt for the AI
    full_query = (
        f"you are a gym trainer, provide advice to {user_info['name']}, "
        f"who is {user_info['age']} years old, {user_info['height']} cm tall, "
        f"and weighs {user_info['weight']} kg. {q}, make it crisp while being specific without any unnecessary things"
    )
    
    response = model.generate_content(full_query)
    
    # Disable question view
    canvas.itemconfig(baseRect, state="hidden")
    canvas.itemconfig(entry_bg_1, state="hidden")
    entry_1.place_forget()
    get_answer_button.place_forget()
    
    # Enable answer view
    ask_another_button.place(x=400.0, y=478.0, width=250.0, height=43.0)
    canvas.itemconfig(base_rect2, state="normal")
    canvas.itemconfig(ques, state="normal")
    canvas.itemconfig(ques, text=q)
    canvas.itemconfig(ans, state="normal")
    
    # Display the AI's response
    split_strings = split_string(response.text)
    global start, end
    start = 0
    end = 13
    canvas.itemconfig(ans, text='\n'.join(split_strings[start:end + 1]))
    canvas.bind_all("<MouseWheel>", scroll_answer)

    global response_area
    if response_area:  # Remove any existing instance
        response_area.place_forget()
    
    response_area = scrolledtext.ScrolledText(
        window,
        wrap=tk.WORD,
        width=80,
        height=16,
        bg="#D9D9D9"  # Match background color
    )
    response_area.place(x=205, y=200)
    response_area.insert(tk.END, response.text)

def ask_another():
    # Disable answer view
    ask_another_button.place_forget()
    canvas.itemconfig(base_rect2, state="hidden")
    canvas.itemconfig(ques, state="hidden")
    canvas.itemconfig(ans, state="hidden")
    
    # Hide the response area if it exists
    global response_area
    if response_area:
        response_area.place_forget()
        response_area = None
    
    # Enable question view
    canvas.itemconfig(baseRect, state="normal")
    canvas.itemconfig(entry_bg_1, state="normal")
    entry_1.place(
        x=221.0,
        y=165.0,
        width=651.0,
        height=120.0
    )
    get_answer_button.place(
        x=663.0,
        y=319.0,
        width=188.0,
        height=43.0
    )

# ANSWER
baseRect2_img = load_image("base_Rect2.png")
base_rect2 = canvas.create_image(547.0, 333.0, image=baseRect2_img)
canvas.itemconfig(base_rect2, state="hidden")

ask_another_img = load_image("ask.png")
ask_another_button = Button(
    image=ask_another_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ask_another(),
    relief="flat"
)

ques = canvas.create_text(
    218.0,
    157.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 20 * -1)
)
canvas.itemconfig(ques, state="hidden")

ans = canvas.create_text(
    216.0,
    249.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 14 * -1),
    width=680,
)

def scroll_answer(event):
    delta = event.delta // 120
    print("delta", delta)
    global end, start
    if (end - delta) <= len(split_strings) and (start - delta) >= 0:
        end = end - delta
        start = start - delta
        print("start", start)
        print("end", end)
        canvas.itemconfig(ans, text='\n'.join(split_strings[start:end + 1]))

canvas.itemconfig(ans, state="hidden")

login_msg = canvas.create_text(
    420.0,
    490.0,
    anchor="nw",
    text="",
    fill="#CC0808",
    font=("Inter", 16 * -1)
)
canvas.itemconfig(login_msg, state="hidden")


def base_layout():
    canvas.itemconfig(bg_img,state="normal")
    # button_1.place(
    # x=7.0,
    # y=114.0,
    # width=141.0,
    # height=48.0
    # )
    button_1.place(
    x=5.0,
    y=220.0,
    width=145.0,
    height=38.0
    )
    # button_2.place(
    #     x=6.0,
    #     y=169.0,
    #     width=141.0,
    #     height=48.0
    # )
    button_2.place(
        x=5.0,
        y=267.0,
        width=145.0,
        height=38.0
    )
    # button_3.place(
    #     x=7.0,
    #     y=224.0,
    #     width=141.0,
    #     height=48.0
    # )
    button_3.place(
        x=5.0,
        y=314.0,
        width=145.0,
        height=38.0
    )
    # button_4.place(
    #     x=7.0,
    #     y=279.0,
    #     width=141.0,
    #     height=48.0
    # )
    button_4.place(
        x=5.0,
        y=361.0,
        width=145.0,
        height=38.0
    )
    # button_5.place(
    #     x=7.0,
    #     y=520.0,
    #     width=141.0,
    #     height=48.0
    # )
    button_5.place(
        x=4.0,
        y=526.0,
        width=148.0,
        height=38.0
    )
curr_tab=""  
def switch_tab(c):
    global curr_tab, response_area
    if response_area:
        response_area.place_forget()
        response_area = None
    if curr_tab=="home":
        canvas.itemconfig(home_image_1,state="hidden")
        canvas.itemconfig(home_image_2,state="hidden")
        button_1.config(image=button_image_1)
        button_1.bind('<Enter>', button_1_hover)
        button_1.bind('<Leave>', button_1_leave)

    elif curr_tab=="workout":
        canvas.itemconfig(choose_workout_image,state="hidden")
        canvas.itemconfig(bg_rect_img,state="hidden")
        pushup_button.place_forget()
        squat_button.place_forget()
        press_button.place_forget()
        curl_button.place_forget()
        bench_button.place_forget()
        button_2.config(image=button_image_2)
        button_2.bind('<Enter>', button_2_hover)
        button_2.bind('<Leave>', button_2_leave)
    elif curr_tab=="question":
        ask_another()
        if response_area:
            response_area.place_forget()
            response_area = None
        canvas.itemconfig(baseRect,state="hidden")
        canvas.itemconfig(entry_bg_1,state="hidden")
        canvas.itemconfig(image_1,state="hidden")
        entry_1.place_forget()
        get_answer_button.place_forget()
        button_3.config(image=button_image_3)
        canvas.unbind_all("<MouseWheel>")
        button_3.bind('<Enter>', button_3_hover)
        button_3.bind('<Leave>', button_3_leave)
    elif curr_tab=="history":
        canvas.itemconfig(image_3,state="hidden")
        canvas.itemconfig(image_2,state="hidden")
        canvas.itemconfig(image_1,state="hidden")
        canvas.itemconfig(user,state="hidden")
        canvas.itemconfig(history,state="hidden")
        button_4.config(image=button_image_4)
        button_4.bind('<Enter>', button_4_hover)
        button_4.bind('<Leave>', button_4_leave)
        canvas.unbind_all("<MouseWheel>")

    if c=="home":
        curr_tab="home"
        canvas.itemconfig(home_image_1,state="normal")
        canvas.itemconfig(home_image_2,state="normal")
        button_1.unbind('<Enter>')
        button_1.unbind('<Leave>')
        button_1.config(image=button_1select)
    elif c=="workout":
        curr_tab="workout"
        button_2.unbind('<Enter>')
        button_2.unbind('<Leave>')
        button_2.config(image=button_2select)
        canvas.itemconfig(choose_workout_image,state="normal")
        canvas.itemconfig(bg_rect_img,state="normal")
        pushup_button.place(
        x=317.0,
        y=232.0,
        width=110.0,
        height=76.0
        )
        press_button.place(
        x=464.0,
        y=346.0,
        width=110.0,
        height=76.0
        )
        squat_button.place(
        x=464.0,
        y=232.0,
        width=110.0,
        height=76.0
        )
        curl_button.place(
        x=317.0,
        y=346.0,
        width=110.0,
        height=76.0
        )
        ####################################################
        bench_button.place(
        x=611.0,  # Adjust these coordinates as needed
        y=346.0,
        width=110.0,
        height=76.0
        )
        ####################################################
    elif c=="history":
        curr_tab="history"
        button_4.unbind('<Enter>')
        button_4.unbind('<Leave>')
        button_4.config(image=button_4select)
        canvas.itemconfig(image_3,state="normal")
        canvas.itemconfig(image_2,state="normal")
        canvas.itemconfig(image_1,state="normal")
        result=collection2.find({"username":userdetails["username"]})
        history_list=""
        for rec in result:
            history_list=history_list+rec["workout"]+"\t\t             "+str(rec["reps"])+"\t\t             "+rec["date"]+"\n"
        print(history_list)
        global split_history,start,end
        split_history=split_string(history_list)
        start=0
        end=10
        canvas.itemconfig(user,text="User:"+userdetails["username"])
        canvas.itemconfig(history,text='\n'.join(split_history[start:end + 1]))
        canvas.itemconfig(user,state="normal")
        canvas.itemconfig(history,state="normal")
        canvas.bind_all("<MouseWheel>",scroll_history)
    elif c=="question":
        curr_tab="question"
        button_3.unbind('<Enter>')
        button_3.unbind('<Leave>')
        button_3.config(image=button_3select)
        
        canvas.itemconfig(image_1,state="normal")
        canvas.itemconfig(baseRect,state="normal")
        canvas.itemconfig(entry_bg_1,state="normal")
        entry_1.place(
            x=221.0,
            y=165.0,
            width=651.0,
            height=120.0
        )
        get_answer_button.place(
            x=663.0,
            y=319.0,
            width=188.0,
            height=43.0
        )
    
    
    







#base_layout()

window.resizable(False, False)
window.mainloop()
